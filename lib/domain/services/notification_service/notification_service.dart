import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart' show PlatformException;
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

// todo –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
class NotificationService {
  NotificationService();

  late final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin;
  late final NotificationAppLaunchDetails? notificationAppLaunchDetails;

  Future<void> init() async {
    flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

    notificationAppLaunchDetails =
        kIsWeb || Platform.isLinux || Platform.isWindows
            ? null
            : await flutterLocalNotificationsPlugin
                .getNotificationAppLaunchDetails();

    await flutterLocalNotificationsPlugin.initialize(
      const InitializationSettings(
        android: AndroidInitializationSettings('app_icon'),
      ),
      onDidReceiveNotificationResponse: notificationTapBackground,
      onDidReceiveBackgroundNotificationResponse: notificationTapBackground,
    );
  }

  @pragma('vm:entry-point')
  static void notificationTapBackground(
    NotificationResponse notificationResponse,
  ) {
    print(notificationResponse.notificationResponseType.name);
  }

  Future<void> updateEvent({
    required String message,
    required int id,
    required DateTime time,
  }) async {
    if (Platform.isWindows) return;

    await flutterLocalNotificationsPlugin.cancel(id);
    await addEvent(
      message: message,
      id: id,
      time: time,
    );
  }

  Future<void> showNowTest() async {
    const androidNotificationDetails = AndroidNotificationDetails(
      '.',
      '..',
      actions: <AndroidNotificationAction>[
        AndroidNotificationAction('yes', '–û–∫'),
        AndroidNotificationAction('yes', '–û—Ç–ª–æ–∂–∏—Ç—å'),
      ],
    );
    const notificationDetails =
        NotificationDetails(android: androidNotificationDetails);

    await flutterLocalNotificationsPlugin.show(
      0,
      '–ê–Ω—Ç–æ–Ω –ø—Ä–∏–≤–µ—Ç!',
      '–Ø –∑–∞–ø—É—Å—Ç–∏–ª —ç—Ç—É —à—Ç—É–∫–æ–≤–∏–Ω—É üöÄ',
      notificationDetails,
    );
  }

  Future<void> addEvent({
    required String message,
    required int id,
    required DateTime time,
  }) async {
    tz.initializeTimeZones();

    const androidNotificationDetails = AndroidNotificationDetails(
      '.',
      '..',
      actions: <AndroidNotificationAction>[
        AndroidNotificationAction('yes', '–û–∫'),
        AndroidNotificationAction('yes', '–û—Ç–ª–æ–∂–∏—Ç—å'),
      ],
    );
    const notificationDetails =
        NotificationDetails(android: androidNotificationDetails);

    // todo: —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ, –∞ –¥–ª—è windows —Å–∏—Å—Ç–µ–º –≤–æ–æ–±—â–µ –Ω–µ –≤–Ω–µ–¥—Ä—è—Ç—å —É–≤–µ–¥–æ–º–ª—è—à–∫–∏
    if (Platform.isWindows) return;

    try {
      await flutterLocalNotificationsPlugin.zonedSchedule(
        id,
        '–í—ã –ø—Ä–æ—Å–∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å...',
        message,
        tz.TZDateTime.now(tz.local)
            .add(Duration(milliseconds: time.millisecondsSinceEpoch)),
        notificationDetails,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );
    } on PlatformException catch (e, s) {
      debugPrint(e.message);
      debugPrint(s.toString());

      throw '';
    }
  }
}
